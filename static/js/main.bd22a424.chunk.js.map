{"version":3,"sources":["Emoji.jsx","Tarot.jsx","App.js","serviceWorker.js","index.js"],"names":["Emoji","props","react_default","a","createElement","className","role","aria-label","label","aria-hidden","symbol","cardStyle","backgroundColor","borderStyle","Tarot","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","firstCard","secondCard","thirdCard","play","carta","cardArray","chooseCard","array","Math","floor","random","length","removeElement","element","filter","value","index","arr","i","push","setState","shuffle","frontSideImage","_this2","dist","flipOnHover","flipOnClick","flipDirection","ref","r","flippy","style","width","height","src","maxWidth","maxHeight","class","renderCard","Component","buttonStyle","color","display","margin","padding","tarotBuilder","src_Tarot","App","Audio","event","defaultFlippy","TarotCards","onClick","handleButtonClick","bind","src_Emoji","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bd22a424.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Emoji = props => (\r\n    <span\r\n        className=\"emoji\"\r\n        role=\"img\"\r\n        aria-label={props.label ? props.label : \"\"}\r\n        aria-hidden={props.label ? \"false\" : \"true\"}\r\n    >\r\n        {props.symbol}\r\n    </span>\r\n\r\n);\r\n\r\nexport default Emoji;","import React, { Component } from 'react';\r\nimport Flippy, { FrontSide, BackSide } from 'react-flippy';\r\n\r\nconst backSideImage = '34.jpg';\r\nconst cardStyle ={\r\n  backgroundColor: '#4B0082',\r\n  borderStyle: 'solid'\r\n};\r\n\r\nclass Tarot extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      firstCard : 0, \r\n      secondCard : 0,\r\n      thirdCard : 0,\r\n      play: true,\r\n      carta: null\r\n    }\r\n\r\n  }\r\n\r\n  shuffle(){\r\n    let cardArray = [];\r\n\r\n    let chooseCard = ( array) =>{\r\n      let ramdonCard = Math.floor((Math.random() * array.length) + 1);\r\n      return ramdonCard;\r\n    }\r\n\r\n    var removeElement = ( array, element) => {\r\n        return array.filter((value, index, arr) => {\r\n          return value !== element;\r\n        });\r\n    }\r\n\r\n    for(let i = 1; i <= 32; i++){\r\n      cardArray.push(i);\r\n    }\r\n  \r\n    let firstCard = chooseCard(cardArray);\r\n    cardArray = removeElement(cardArray, this.state.firstCard);\r\n    let secondCard = chooseCard(cardArray);\r\n    cardArray = removeElement(cardArray, this.state.secondCard);\r\n    let thirdCard = chooseCard(cardArray);\r\n    this.setState({ firstCard: firstCard, secondCard: secondCard , thirdCard: thirdCard});\r\n  }\r\n\r\n  componentWillMount(){\r\n    this.shuffle()\r\n  }\r\n\r\n  renderCard(frontSideImage) {\r\n    return (\r\n    <Flippy\r\n      flipOnHover={false} // default false\r\n      flipOnClick={true} // default false\r\n      flipDirection=\"horizontal\" // horizontal or vertical\r\n      ref={(r) => this.flippy = r} \r\n      style={{ width: '277px', height: '440px' }} \r\n    >\r\n\r\n      <FrontSide style={{cardStyle}}>\r\n        <img src={'/' + backSideImage} style={{ maxWidth: '100%', maxHeight: '100%' }}/>\r\n      </FrontSide>\r\n\r\n      <BackSide style={{cardStyle}}>\r\n        <img src={ '/' + frontSideImage + '.jpg'} style={{ maxWidth: '100%', maxHeight: '100%' }} />\r\n      </BackSide>\r\n\r\n    </Flippy>);\r\n\r\n  }\r\n\r\n\r\n  render() {\r\n    \r\n\r\n    return (\r\n      <div class=\"container\">\r\n        <div class=\"row\">\r\n          <div class=\"col order-last\">\r\n          {this.renderCard(this.state.firstCard)}\r\n          </div>\r\n          <div class=\"col\">\r\n          {this.renderCard(this.state.secondCard)}\r\n          </div>\r\n          <div class=\"col order-first\">\r\n          {this.renderCard(this.state.thirdCard)}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tarot;\r\n","import React, { Component } from 'react';\nimport Emoji from './Emoji'\nimport Tarot from './Tarot'\nimport './App.css';\n\nconst buttonStyle ={\n  backgroundColor: '#4B0082',\n  borderStyle: 'solid',\n  color: 'white',\n  display: 'table',\n  margin: 'auto',\n  padding: 20\n};\n\nconst tarotBuilder = () => {\n  return function tarotFactory(props) {\n    return <Tarot />;\n  }\n}\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n      play: true,\n      carta: null,\n\n    }\n\n    let audio = new Audio('/alf-series-tv.mp3');\n    audio.play();\n  }\n\n  handleButtonClick(event) {\n    let flippy = tarotBuilder();\n    this.setState({ flippy: flippy});\n  }\n\n  componentWillMount() {\n    let defaultFlippy = tarotBuilder();\n    this.setState({ flippy: defaultFlippy});\n  }\n\n  render() {\n    let TarotCards = this.state.flippy\n    return (\n      <div class=\"container\">\n        <TarotCards/>\n        <button \n          style={buttonStyle} \n          className={\"btn btn-secondary btn-lg\"} \n          onClick={this.handleButtonClick.bind(this)}> \n          Shuffle\n          <Emoji symbol=\"🔁\"/>\n        </button>\n      </div>\n       \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}