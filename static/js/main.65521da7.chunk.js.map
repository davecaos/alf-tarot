{"version":3,"sources":["Emoji.jsx","TarotCard.jsx","Tarot.jsx","App.js","serviceWorker.js","index.js"],"names":["Emoji","props","react_default","a","createElement","className","role","aria-label","label","aria-hidden","symbol","PUBLIC_URL","process","frontSideImage","TarotCard","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","backSideImage","_this2","dist","flipOnHover","flipOnClick","flipDirection","ref","r","flippy","style","width","height","src","alt","maxWidth","maxHeight","Component","display","flexDirection","margin","Tarot","cardArray","chooseCardFromDeck","array","Math","floor","random","length","removeElement","element","filter","value","index","arr","firstCard","secondCard","thirdCard","class","src_TarotCard","buttonStyle","backgroundColor","borderStyle","color","padding","App","event","setState","TarotCards","onClick","handleButtonClick","bind","src_Emoji","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.65521da7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Emoji = props => (\r\n    <span\r\n        className=\"emoji\"\r\n        role=\"img\"\r\n        aria-label={props.label ? props.label : \"\"}\r\n        aria-hidden={props.label ? \"false\" : \"true\"}\r\n    >\r\n        {props.symbol}\r\n    </span>\r\n\r\n);\r\n\r\nexport default Emoji;","import React, { Component } from 'react';\r\nimport Flippy, { FrontSide, BackSide } from 'react-flippy';\r\n\r\nconst PUBLIC_URL = process.env.PUBLIC_URL;\r\nconst frontSideImage = PUBLIC_URL + '/frontSideImage.jpg';\r\n\r\nclass TarotCard extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      backSideImage: PUBLIC_URL + '/' + this.props.backSideImage  + '.jpg'\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Flippy\r\n        flipOnHover={false} // default false\r\n        flipOnClick={true} // default false\r\n        flipDirection=\"horizontal\" // horizontal or vertical\r\n        ref={(r) => this.flippy = r}\r\n        style={{ width: '277px', height: '440px' }} \r\n      >\r\n\r\n        <FrontSide >\r\n          <img src={ frontSideImage} alt=\"front\" style={{ maxWidth: '100%', maxHeight: '100%' }} />\r\n        </FrontSide>\r\n\r\n        <BackSide >\r\n          <img src={this.state.backSideImage} alt=\"back\" style={{ maxWidth: '100%', maxHeight: '100%' }}  />\r\n        </BackSide>\r\n\r\n      </Flippy>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TarotCard;\r\n","import React, { Component } from 'react';\r\nimport TarotCard from './TarotCard';\r\n\r\nconst style= { \r\n  display: 'flex',\r\n  flexDirection: 'row',\r\n  width: '60%',\r\n  margin: 'auto'\r\n }\r\n\r\n function Tarot()  {\r\n\r\n    let cardArray =  [ \r\n      1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32\r\n    ];\r\n\r\n    const chooseCardFromDeck = (array) => {\r\n      return array[Math.floor((Math.random() * array.length))];\r\n    }\r\n    \r\n    const removeElement = (array, element) => {\r\n      return array.filter((value, index, arr) => {\r\n        return value !== element;\r\n      });\r\n    }\r\n  \r\n    let firstCard = chooseCardFromDeck(cardArray);\r\n    let secondArray = removeElement(cardArray, firstCard);\r\n\r\n    let secondCard = chooseCardFromDeck(secondArray);\r\n    let thirdArray = removeElement(cardArray, secondCard);\r\n\r\n    let thirdCard = chooseCardFromDeck(thirdArray);\r\n\r\n\r\n\r\n    return (\r\n        <div class=\"row\" style={{style}}>\r\n          <div class=\"col order-last\" >\r\n            <TarotCard backSideImage={firstCard}/>\r\n          </div>\r\n          <div class=\"col\">\r\n            <TarotCard backSideImage={secondCard}/>\r\n          </div>\r\n          <div class=\"col order-first\">\r\n            <TarotCard backSideImage={thirdCard}/>\r\n          </div>\r\n        </div>\r\n    );\r\n  }\r\n\r\nexport default Tarot;\r\n","import React, { Component } from 'react';\r\nimport Emoji from './Emoji'\r\nimport Tarot from './Tarot'\r\nimport './App.css';\r\n\r\nconst buttonStyle ={\r\n  backgroundColor: '#4B0082',\r\n  borderStyle: 'solid',\r\n  color: 'white',\r\n  display: 'table',\r\n  margin: 'auto',\r\n  padding: 20\r\n};\r\n\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      flippy: null,\r\n    }\r\n  }\r\n\r\n  handleButtonClick(event) {\r\n    let flippy = () =>{return Tarot()};\r\n    this.setState({ flippy: flippy});\r\n  }\r\n\r\n  componentWillMount() {\r\n    let defaultFlippy = () =>{return Tarot()};\r\n    this.setState({ flippy: defaultFlippy});\r\n  }\r\n\r\n  render() {\r\n    let TarotCards = this.state.flippy\r\n    return (\r\n      <div class=\"container\">\r\n        <TarotCards/>\r\n        <button \r\n          style={buttonStyle} \r\n          className={\"btn btn-secondary btn-lg\"} \r\n          onClick={this.handleButtonClick.bind(this)}> \r\n          Shuffle\r\n          <Emoji symbol=\"🔁\"/>\r\n        </button>\r\n      </div>\r\n       \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}